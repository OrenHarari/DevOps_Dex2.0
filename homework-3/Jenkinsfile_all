pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "orenharari33/getting-started"
        DOCKER_TAG = "latest"
        DOCKERHUB_CREDENTIALS = credentials('orenharari33-dockerhub')
    }

    stages {
        stage('Prepare Docker Environment') {
            steps {
                script {
                    docker.image('docker:dind').withRun('-v /var/run/docker.sock:/var/run/docker.sock') { c ->
                        docker.image('docker:dind').inside("--volumes-from ${c.id}") {
                            sh 'docker version'
                        }
                    }
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    docker.image('docker:dind').inside('-v /var/run/docker.sock:/var/run/docker.sock') {
                        sh "docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    docker.image('docker:dind').inside('-v /var/run/docker.sock:/var/run/docker.sock') {
                        withCredentials([usernamePassword(credentialsId: 'orenharari33-dockerhub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                            sh "echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin"
                            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                docker.image('docker:dind').inside('-v /var/run/docker.sock:/var/run/docker.sock') {
                    sh 'docker logout'
                }
            }
        }
        success {
            echo "Successfully pulled and pushed Docker image to DockerHub"
        }
        failure {
            echo "Failed to pull or push Docker image"
        }
    }
}
